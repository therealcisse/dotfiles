# Until .agrc exists...
# (https://github.com/ggreer/the_silver_searcher/pull/709)
function ag() {
  emulate -L zsh

  # Overwrite alias of ag btw omz debian plugin to use for silver searcher
  if [ -e /usr/bin/ag ];
  then
    AG=/usr/bin/ag
  else
    # on osx brew installs ag as Ag
    AG=Ag
  fi

  # italic blue paths, pink line numbers, underlined purple matches
  $AG --pager="less -iFMRSX" --color-path=34\;3 --color-line-number=35 --color-match=35\;1\;4 "$@"
}

function history() {
  emulate -L zsh

  # This is a function because Zsh aliases can't take arguments.
  local DEFAULT=-1000
  builtin history ${1:-$DEFAULT}
}

function mvim() {
  emulate -L zsh

  # Makes user-installed fonts visible to MacVim.
  if which reattach-to-user-namespace &> /dev/null ; then
    reattach-to-user-namespace mvim
  else
    command mvim
  fi
}

function scratch() {
  local SCRATCH=$(mktemp -d)
  echo 'Spawing subshell in scratch directory:'
  echo "  $SCRATCH"
  (cd $SCRATCH; zsh)
  echo "Removing scratch directory"
  rm -r "$SCRATCH"
}

function tmux() {
  emulate -L zsh

  # Make sure even pre-existing tmux sessions use the latest SSH_AUTH_SOCK.
  # (Inspired by: https://gist.github.com/lann/6771001)
  local SOCK_SYMLINK=~/.ssh/ssh_auth_sock
  if [ -r "$SSH_AUTH_SOCK" -a ! -L "$SSH_AUTH_SOCK" ]; then
    ln -sf "$SSH_AUTH_SOCK" $SOCK_SYMLINK
  fi

  # If provided with args, pass them through.
  if [[ -n "$@" ]]; then
    env SSH_AUTH_SOCK=$SOCK_SYMLINK tmux -f ~/.tmux.conf "$@"
    return
  fi

  # Check for .tmux file (poor man's Tmuxinator).
  if [ -f .tmux -a -x .tmux ]; then
    # Prompt the first time we see a given .tmux file before running it.
    local DIGEST="$(openssl sha -sha512 .tmux)"
    if ! grep -q "$DIGEST" ~/..tmux.digests 2> /dev/null; then
      cat .tmux
      read -k 1 -r \
        'REPLY?Trust (and run) this .tmux file? (t = trust, otherwise = skip) '
      echo
      if [[ $REPLY =~ ^[Tt]$ ]]; then
        echo "$DIGEST" >> ~/..tmux.digests
        ./.tmux
        return
      fi
    else
      ./.tmux
      return
    fi
  fi

  # Attach to existing session, or create one, based on current directory.
  SESSION_NAME=$(basename "$(pwd)")
  env SSH_AUTH_SOCK=$SOCK_SYMLINK tmux new -A -s "$SESSION_NAME"
}

function mail() {
  if ! tmux has-session -t email 2> /dev/null; then
    # Make saved attachments go to ~/Downloads by default.
    tmux new-session -d -s email -c ~/Downloads -n mutt
    tmux send-keys -t email:mutt mutt Enter
    tmux new-window -t email -c ~/.mutt -n sync
    tmux send-keys -t email:sync '~/.mutt/scripts/control.sh home' Enter
    # tmux split-window -t email:sync -h -c ~/.mutt
    # tmux send-keys -t email:sync.right '~/.mutt/scripts/control.sh work' Enter
    tmux split-window -t email:sync -v -f -l 8 -c ~/.mutt
    tmux send-keys -t email:sync.bottom '~/.mutt/scripts/control.sh' Enter
  fi
  if [ -z "$TMUX" ]; then
    tmux attach -t email:mutt
  else
    tmux switch-client -t email:mutt
  fi
}

# Convenience function for jumping to hashed directory aliases
# (ie. `j rn` -> `jump rn` -> `cd ~rn`).
function jump() {
  emulate -L zsh

  if [ $# -eq 0 ]; then
    cd -
  elif [ $# -gt 1 ]; then
    echo "jump: single argument required, got $#"
    return 1
  else
    if [ $(hash -d|cut -d= -f1|grep -c "^$1\$") = 0 ]; then
      # Not in `hash -d`: assume it's just a dir.
      cd $1
    else
      cd ~$1
    fi
  fi
}

function gitClean () {
  if [ $# -eq 0 ]; then
    git clean -f -d .
    git clean -f -X .
  else
    git clean -f -d $1
    git clean -f -X $1
  fi
}

function _jump_complete() {
  emulate -L zsh
  local word completions
  word="$1"
  completions="$(hash -d|cut -d= -f1)"
  reply=( "${(ps:\n:)completions}" )
}

# Complete filenames and `hash -d` entries.
compctl -f -K _jump_complete jump

# Change file extensions recursively in current directory
#
#   change-extension erb haml

function change-extension() {
  foreach f (**/*.$1)
    mv $f $f:r.$2
  end
}

# Load .env file into shell session for environment variables

function envup() {
  if [ -f .env ]; then
    export `cat .env`
  else
    echo 'No .env file found' 1>&2
    return 1
  fi
}

# No arguments: `git status`
# With arguments: acts like `git`
g() {
  if [[ $# > 0 ]]; then
    git $@
  else
    git status
  fi
}

# Complete g like git
compdef g=git

# Make directory and change into it.

function mcd() {
  mkdir -p "$1" && cd "$1";
}

# regmv = regex + mv (mv with regex parameter specification)
#   example: regmv '/\.tif$/.tiff/' *
#   replaces .tif with .tiff for all files in current dir
#   must quote the regex otherwise "\." becomes "."
# limitations: ? doesn't seem to work in the regex, nor *
regmv()
{
  if [ $# -lt 2 ]; then
    echo "  Usage: regmv 'regex' file(s)"
    echo "  Where:       'regex' should be of the format '/find/replace/'"
    echo "Example: regmv '/\.tif\$/.tiff/' *"
    echo "   Note: Must quote/escape the regex otherwise \"\.\" becomes \".\""
    return 1
  fi
  regex="$1"
  shift
  while [ -n "$1" ]
  do
    newname=$(echo "$1" | sed "s${regex}g")
    if [ "${newname}" != "$1" ]; then
      mv -i -v "$1" "$newname"
    fi
    shift
  done
}

# Kill a process by name
function k() {
  process_name=$1
  len=${#process_name}
  new_process_name="[${process_name:0:1}]${process_name:1:$len}"
  processes=$(ps -A | grep -i $new_process_name)
  # awk '{ print "Found: "$0 }' <($processes)
  if [[ -n $processes ]]; then
    if [ $len = 1 ]; then
      printf '\033[0;35m%s\033[0m\n' "Do you wish to kill these processes? (y/n) "
    else
      printf '\033[0;35m%s\033[0m\n' "Do you wish to kill this process? (y/n) "
    fi
    read resp;
    case $resp in
      [Yy]* ) ps -A | grep -i $new_process_name | awk '{print $1}' | xargs kill -9;;
      [Nn]* ) printf '\033[0;35m%s\033[0m\n' "Goodbye"; return;;
    esac
  else
    printf '\033[0;31m%s\033[0m\n' "No process found with the name "
    printf '\033[1;31m%s\033[0m\n' "$1"
  fi
}

prettyjson_w() {
  curl "$1" | python -m json.tool
}
